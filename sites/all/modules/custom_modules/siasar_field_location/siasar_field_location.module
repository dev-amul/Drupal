<?php

/**
 * Implements hook_views_api().
 */
function siasar_field_location_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'siasar_field_location') . '/views',
  );
}

/**
 * Implements hook_menu()
 **/
function siasar_field_location_menu() {
  $items['ajax/location/%/%'] = array(
    'page callback' => 'siasar_field_location_term_list',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  $items['ajax/location/%/%/parents'] = array(
    'page callback' => 'siasar_field_location_term_parents',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  return $items;
}


/**
 * Implementation of hook_services_resources().
 */
function siasar_field_location_services_resources() {
  return array(
    'location_hierarchy' => array(
      'operations' => array(
        'index' => array(
          'help' => 'Retrieves hierarchy of location terms. Arguments:<br/>OPERATION (children/ancestors) = children, TID = 0, COUNTRY (ISO2) = all',
          'callback' => '_siasar_field_location_api_children',
          'file' => array('file' => 'services.inc', 'module' => 'siasar_field_location'),
          'args' => array(
            array(
              'name' => 'operation',
              'type' => 'string',
              'description' => 'children/ancestors: retrieve children or ancestors',
              'source' => array('path' => 0),
              'optional' => FALSE,
            ),
            array(
              'name' => 'tid',
              'type' => 'integer',
              'description' => 'Term ID, defaults to 0, top level of hierarchy',
              'default value' => 0,
              'source' => array('path' => 1),
              'optional' => TRUE,
            ),
            array(
              'name' => 'country',
              'type' => 'string',
              'description' => 'Country as ISO2, defaults to "all"',
              'default value' => 'all',
              'source' => array('path' => 2),
              'optional' => TRUE,
            )
          ),
          'access arguments' => array('access content'),
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_info().
 */
function siasar_field_location_field_widget_info() {
  return array(
    'siasar_hierarchical_select' => array(
      'label' => t('SIASAR Hierarchical Select'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'siasar_hierarchical_select' => array(
          'force_deepest' => FALSE,
          'country_field_name' => FALSE,
          'restrictions' => array(
            'country' => FALSE,
            'max_level' => 0,
            'can_change' => TRUE,
          )
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function siasar_field_location_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $field = $instance['field_name'];
  $default_value = isset($items[$delta]['tid'])
    ? $items[$delta]['tid']
    : null;
  $force_deepest = isset($instance['widget']['settings']['siasar_hierarchical_select']['force_deepest'])
    ? isset($instance['widget']['settings']['siasar_hierarchical_select']['force_deepest'])
    : false;

  $country_field_name = isset($instance['widget']['settings']['siasar_hierarchical_select']['country_field_name'])
    ? $instance['widget']['settings']['siasar_hierarchical_select']['country_field_name']
    : false;

  $element += siasar_field_location_field_widget_skeleton($field, $instance, $default_value, $force_deepest, $country_field_name);

  return $element;
}

/**
 * Prepares an structure of fields that the user should not be able to modify
 *
 * The possible values to be returned are:
 * array(
 *  'country' => TRUE|FALSE  : Block country yes/no
 *  'max_level' => int with maximum level : Block up to which location level
 *  'can_change' => TRUE|FALSE : Determines if the user should be able to change a location
 * )
 *
 * @return array of restrictions
 */
function siasar_field_location_get_visibility_restrictions($instance) {
  global $user;

  // Having $instance means that this is acting as field widget, not form api
  // ie. the field widget is used in the user entity, while the form api field
  // is used in an exposed form.
  $can_change = ($instance && user_access('assign territorial division')) || !$instance;

  if (user_access('assign territorial division')) {
    return array(
      'country' => FALSE,
      'max_level' => 0,
      'can_change' => $can_change,
    );
  }

  $user_wrapper = entity_metadata_wrapper('user', $user);
  $country = $user_wrapper->field_pais->value();
  $location = $user_wrapper->field_entidad_local->value();

  $terms = array();
  if ($location) {
    $terms = taxonomy_get_parents_all($location->tid);
  }

  return array(
    'country' => $country ? TRUE : FALSE,
    'max_level' => sizeof($terms),
    'can_change' => $can_change,
  );

}

/**
 * Prepares the location widget structure for rendering
 *
 * @param $field_name
 * @param null $default_value
 * @param bool $force_deepest
 * @param bool $country_field_name
 *
 * @return array
 */
function siasar_field_location_field_widget_skeleton($field_name, $instance, $default_value = null, $force_deepest = false, $country_field_name = false) {

  $restrictions = siasar_field_location_get_visibility_restrictions($instance);

  $module_path = drupal_get_path('module', 'siasar_field_location');

  $element = array(
    '#type' => 'textfield',
    '#size' => 8,
    '#default_value' => $default_value,
    '#maxlength' => 1024,
    '#element_validate' => array('siasar_field_location_validate'),
    '#attached' => array(
      'css' => array($module_path . '/siasar_field_location.css'),
      'js' => array(
        $module_path . '/siasar_field_location.plugin.js',
        $module_path . '/siasar_field_location.js',
        array(
          'data' => array(
            'siasarHierarchicalSelect' => array(
              $field_name => array(
                'forceDeepest' => $force_deepest,
                'countryFieldName' => $country_field_name,
                'restrictions' => $restrictions
              ),
            ),
          ),
          'type' => 'setting',
        ),
      ),
    ),
    '#attributes' => array(
      'class' => array('siasar-hierarchical-select'),
      'field-name' => $field_name,
    ),
  );

  return $element;
}

/**
 * Implements hook_field_widget_settings_form().
 */
function siasar_field_location_field_widget_settings_form($field, $instance) {
  $widget = $instance['widget'];
  $settings = $widget['settings'];

  if ($widget['type'] == 'siasar_hierarchical_select') {
    $form['siasar_hierarchical_select'] = array(
      '#type' => 'fieldset',
      '#title' => 'SIASAR Hierarchical Select settings',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#tree' => TRUE,
    );
    $form['siasar_hierarchical_select']['country_field_name'] = array(
      '#type' => 'textfield',
      '#title' => t('Country field_name name'),
      '#description' => t('Name of the country field_name (if it\'s present).'),
      '#default_value' => empty($settings['siasar_hierarchical_select']['country_field_name']) ? FALSE : $settings['siasar_hierarchical_select']['country_field_name'],
    );
    $form['siasar_hierarchical_select']['force_deepest'] = array(
      '#type' => 'checkbox',
      '#title' => t('Force selection of deepest level'),
      '#description' => t('If checked the user will be forced to select terms from the deepest level.'),
      '#default_value' => empty($settings['siasar_hierarchical_select']['force_deepest']) ? FALSE : $settings['siasar_hierarchical_select']['force_deepest'],
    );
  }

  return $form;
}

/**
 * Form element validate handler for SIASAR Field Location taxonomy term element.
 */
function siasar_field_location_validate($element, &$form_state) {
  $form_type = isset($form_state['view'])
    ? 'view'
    : 'field_name';

  switch ($form_type) {
    case 'view':
      $field_name = $element['#name'];
      $language = LANGUAGE_NONE;
      $widget_settings = array(
        'force_deepest' => 0,
        'country_field_name' => ''
      );
      break;
    case 'field_name':
      $field_name = $element['#field_name'];
      $language = $element['#language'];
      $widget_settings = isset($form_state['field_name'])
        ? $form_state['field_name'][$field_name][$language]['instance']['widget']['settings']['siasar_hierarchical_select']
        : null;
      break;
  }


  if ($element['#required'] && $element['#value'] === '_none') {
    form_set_error($element['#name'], t('Field is required.'));
  }

  if ($element['#value'] === '' || $element['#value'] === '_none') {
    return;
  }

  // @todo add validation that checks if the taxonomy corresponds to the country

  // Is it a valid number?
  if (!is_numeric($element['#value'])) {
    form_set_error($element['#name'], t('Taxonomy item must be a TID number, not a name'));
    return;
  }

  // Is it a Valid Term?
  $term = taxonomy_term_load($element['#value']);
  if ($term === false) {
    form_set_error($element['#name'], t('Specified TID does not match any term.'));
    return;
  }

  // Does it belong to the right vocabulary?
  // Does not apply on Views
  if ($form_type !== 'view') {
    $field = field_widget_field($element, $form_state);
    $vocabularies = array();
    foreach ($field['settings']['allowed_values'] as $tree) {
      if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
        $vocabularies[$vocabulary->vid] = $vocabulary;
      }
    }
    if (!in_array($term->vid, array_keys($vocabularies))) {
      form_set_error($element['#name'], t('Specified term does not belong to an allowed vocabulary. See field_name [@field_name] configuration for details.', array('@field_name' => $field_name)));
      return;
    }
  }

  if (isset($widget_settings['force_deepest']) && $widget_settings['force_deepest'] === 1) {
    $children = _siasar_field_location_get_term_list_from_view($element['#value'], 'all');
    if (!empty($children)) {
        form_error($element, t('You need to select a term from the deepest level in field_name [@field_name].', array('@field_name' => $field_name)));
        return;
    }
  }

  if ($form_type !== 'view')  {
    form_set_value($element, (array) $term, $form_state);
  }
}

/**
 * Returns a JSON of taxonomy terms for Vocabulary location.
 */
function siasar_field_location_term_list($parent = 0, $country = 'all') {
  $terms_list = _siasar_field_location_get_term_list_from_view($parent, $country);

  return drupal_json_output($terms_list);
}

/**
 * Returns a list of taxonomy terms for Vocabulary location using a view:
 * division_politica_administrativa:term_reference_location_by_country
 */
function _siasar_field_location_get_term_list_from_view($parent, $country) {
  $result = '';
  $terms_view = views_get_view('division_politica_administrativa');

  if (is_object($terms_view) ) {
    $terms_view->set_display('term_reference_location_by_country');
    $terms_view->set_arguments(array($parent, $country));
    $terms_view->execute();
    $result = $terms_view->result;
  }
  $terms_list = _siasar_field_location_map_result_into_term_list($result);

  return $terms_list;
}

/**
 * Returns an array of [tid] => term name from an array of Taxonomy term objects
 */
function _siasar_field_location_map_result_into_term_list($result) {
  $terms = array();
  foreach ($result as $r) {
    $latest_term = &$terms[];
    $latest_term = array(
      'tid' => $r->tid,
      'name' => $r->taxonomy_term_data_name
    );
    if (!empty($r->field_field_codigo_division_admin)) {
      $latest_term['field_codigo_division_admin'] = $r->field_field_codigo_division_admin[0]['raw']['safe_value'];
    }
  }
  return $terms;
}

/**
 * Returns a JSON of parent terms for a given TID,
 * sorted from higher ancestor to itself.
 */
function siasar_field_location_term_parents($tid, $country = 'all') {
  $parents_clean = _siasar_field_location_get_term_ancestors($tid, $country);

  return drupal_json_output($parents_clean);
}

/**
 * Helper function.
 * Returns an array of parent terms for a given TID,
 * sorted from higher ancestor to itself.
 */
function _siasar_field_location_get_term_ancestors($tid, $country = 'all') {
  $parents = taxonomy_get_parents_all($tid);
  $parents_clean = array();
  foreach ($parents as $p) {
    $parents_clean[$p->tid] = _siasar_field_location_get_term_list_from_view($p->tid, 'all');
  };
  $parents_clean[0] = _siasar_field_location_get_term_list_from_view(0, $country);

  return $parents_clean;
}

/**
 * Implements hook_permission().
 */
function siasar_field_location_permission() {
  return array(
    'assign territorial division' => array(
      'title' => t('Assign territorial division'),
      'description' => t('User can assign a territorial division to any user. It can also check questionnaires from any location.'),
    ),
  );
}

/**
 * Implements hook_field_formatter_info().
 */
function siasar_field_location_field_formatter_info() {
  return array(
    'siasar_field_location_hierarchy' => array(
      'label' => t('SIASAR Full location'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'style' => 'text'
      ),
    ),
  );
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function siasar_field_location_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';
  if ($display['type'] == 'siasar_field_location_hierarchy') {
    switch($settings['style']) {
      case 'text':
        $summary = t('Terms hierarchy displayed as text');
        break;
      case 'links':
        $summary = t('Terms hierarchy displayed as links');
        break;
    }
  }

  return $summary;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function siasar_field_location_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $element = array();

  if ($display['type'] == 'siasar_field_location_hierarchy') {

    $element['style'] = array(
      '#type' => 'select',
      '#title' => 'Display type',
      '#options' => array(
        'text' => 'Text plain',
        'links' => 'Linked terms to SIASAR questionnaires results'
      ),
      '#default_value' => $settings['style'],
    );

  }

  return $element;
}

/**
 * Implements hook_field_formatter_prepare_view().
 */
function siasar_field_location_field_formatter_prepare_view($entity_type, $entities, $field, $instances, $langcode, &$items, $displays) {
  $field_column = key($field['columns']);
  foreach ($entities as $entity_id => $entity) {
    if (empty($displays[$entity_id]['type']) || $displays[$entity_id]['type'] != 'siasar_field_location_hierarchy') {
      return;
    }
    foreach ($items[$entity_id] as $delta => $item) {
      $items[$entity_id][$delta]['parents'] = array();
      // Load list of parent terms.
      $parents = taxonomy_get_parents_all($item[$field_column]);
      // Remove current term from list.
      array_shift($parents);
      if (module_exists('i18n_taxonomy')) {
        // Localize terms.
        $parents = i18n_taxonomy_localize_terms($parents);
      }
      foreach (array_reverse($parents) as $parent) {
        $items[$entity_id][$delta]['parents'][$parent->tid] = $parent;
      }
      // Load term.
      $term_current = taxonomy_term_load($item[$field_column]);
      if (module_exists('i18n_taxonomy')) {
        // Localize current term.
        $term_current = i18n_taxonomy_localize_terms($term_current);
      }
      $items[$entity_id][$delta]['term'] = $term_current;
    }
  }
}

/**
 * Returns a link for a field_location value
 *
 * @param $term
 * @param array $options
 *
 * @return string
 */
function siasar_field_location_l($term, $options = array()) {
  // Merge in defaults.
  $options += array(
    'attributes' => array(),
    'html' => FALSE,
  );

  $field_name = 'field_entidad_local';
  $widget_type = 'siasar_hierarchical_select';
  $field_pais = 'field_pais_iso2';

  $options['query'][$field_name . '_' . $widget_type] = $term->tid;
  if (!empty($term->field_pais)) {
    $options['query'][$field_pais] = $term->field_pais[LANGUAGE_NONE][0]['iso2'];
  }

  $name = $term->name;

  if (!empty($term->field_codigo_division_admin)) {
    $name .= ' - ' . $term->field_codigo_division_admin[LANGUAGE_NONE][0]['safe_value'];
  }

  return l($name, 'resultados', $options);
}

/**
 * Implements hook_field_formatter_view().
 */
function siasar_field_location_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $elements = array();
  $settings = $display['settings'];

  if (empty($items) || $display['type'] != 'siasar_field_location_hierarchy') {
    return $elements;
  }

  $links = $settings['style'] == 'links';

  // Only users with perm can see the links for the territorial division
  if ($links && !user_access('assign territorial division')) {
    $links = FALSE;
  }

  switch ($display['type']) {
    case 'siasar_field_location_hierarchy':
      foreach ($items as $delta => $item) {
        if (empty($item['term'])) {
          continue;
        }
        $list_items = array();
        // Add parent term names.
        foreach ($item['parents'] as $parent) {
          $list_items[] = array(
            'data' => $links ? siasar_field_location_l($parent) : $parent->name,
            'class' => array('parent'),
          );
        };
        // Add name of selected term.
        $list_items[] = array(
          'data' => $links ? siasar_field_location_l($item['term']) : $item['term']->name,
          'class' => array('selected'),
        );
        $elements[$delta] = array(
          '#items' => $list_items,
          '#theme' => 'item_list',
          '#attributes' => array(
            'class' => 'siasar-hierarchy',
          ),
        );
      }
      break;
  }

  return $elements;
}

/**
 * Load the location widget in exposed forms.
 *
 * @param $form
 * @param $form_state
 * @param $field_entidad_local
 */
function load_exposed_form_country_location_widget(&$form, &$form_state, $field_entidad_local) {
  $default_location = _siasar_validate_and_get_default_location($field_entidad_local, $form_state);
  $form[$field_entidad_local] = siasar_field_location_field_widget_skeleton($field_entidad_local, NULL, $default_location, FALSE, FALSE, FALSE);

  $form['field_pais_iso2'] = _feature_siasar_views_reports_create_country_selector();

  // Country field is only for admins
  if (!user_access('assign territorial division')) {
    $form['field_pais_iso2']['#disabled'] = 'true';
  }
}
