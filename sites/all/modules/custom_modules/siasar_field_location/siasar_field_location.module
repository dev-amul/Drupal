<?php

/**
 * Implements hook_menu()
 **/
function siasar_field_location_menu() {
  $items['ajax/location/%/%'] = array(
    'page callback' => 'siasar_field_location_term_list',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'access callback' => TRUE,
  );
  return $items;
}


/**
 * Implements hook_field_widget_info().
 */
function siasar_field_location_field_widget_info() {
  return array(
    'siasar_hierarchical_select' => array(
      'label' => t('SIASAR Hierarchical Select'),
      'field types' => array('taxonomy_term_reference'),
      'settings' => array(
        'siasar_hierarchical_select' => array(
          'force_deepest' => FALSE,
        ),
      ),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function siasar_field_location_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {

  $element += array(
    '#type' => 'textfield',
    '#size' => 8,
    '#default_value' => isset($items[$delta]['tid']) ? $items[$delta]['tid'] : '',
    '#maxlength' => 1024,
    '#element_validate' => array('siasar_field_location_validate'),
  );

  return $element;
}

/**
 * Form element validate handler for SIASAR Field Location taxonomy term element.
 */
function siasar_field_location_validate($element, &$form_state) {
  // Autocomplete widgets do not send their tids in the form, so we must detect
  // them here and process them independently.
  /*
  $value = array();
  if ($tags = $element['#value']) {
    // Collect candidate vocabularies.
    $field = field_widget_field($element, $form_state);
    $vocabularies = array();
    foreach ($field['settings']['allowed_values'] as $tree) {
      if ($vocabulary = taxonomy_vocabulary_machine_name_load($tree['vocabulary'])) {
        $vocabularies[$vocabulary->vid] = $vocabulary;
      }
    }

    // Translate term names into actual terms.
    $typed_terms = drupal_explode_tags($tags);
    foreach ($typed_terms as $typed_term) {
      // See if the term exists in the chosen vocabulary and return the tid;
      // otherwise, create a new 'autocreate' term for insert/update.
      if ($possibilities = taxonomy_term_load_multiple(array(), array('name' => trim($typed_term), 'vid' => array_keys($vocabularies)))) {
        $term = array_pop($possibilities);
      }
      else {
        $vocabulary = reset($vocabularies);
        $term = array(
          'tid' => 'autocreate',
          'vid' => $vocabulary->vid,
          'name' => $typed_term,
          'vocabulary_machine_name' => $vocabulary->machine_name,
        );
      }
      $value[] = (array)$term;
    }
  }

  form_set_value($element, $value, $form_state);

  */
}

/**
 * Implements hook_form_alter()
**/
function siasar_field_location_form_alter(&$form, &$form_state, $form_id) {
  $allowed_form_ids = array(
    'testingpurposes_entityform_edit_form',
  );
  if (!in_array($form_id, $allowed_form_ids)) return;

  $module_path = drupal_get_path('module', 'siasar_field_location');
  drupal_add_js($module_path . '/siasar_field_location.js', array('scope' => 'footer'));
  //drupal_add_css($module_path . '/siasar_field_location.css');

  $form['field_entidad_local']['#attributes']['class'][] = 'siasar-hierarchical-select';
}

/**
 * Returns a list of taxonomy terms for Vocabulary location as JSON
 * It uses a view: division_politica_administrativa:term_reference_location_by_country
 * to get results.
 */
function siasar_field_location_term_list($parent = 0, $country = 'all') {
  $result = '';
  $terms_view = views_get_view('division_politica_administrativa');

  if (is_object($terms_view) ) { 
    $terms_view->set_display('term_reference_location_by_country');
    $terms_view->set_arguments(array($parent, $country));
    $terms_view->execute();
    $result = $terms_view->result;
  }
  $terms_list = _siasar_field_location_map_result_into_term_list($result);

  return drupal_json_output($terms_list);
}

/**
 * Returns an array of [tid] => term name from an array of Taxonomy term objects
 */
function _siasar_field_location_map_result_into_term_list($result) {
  $terms = array();
  foreach ($result as $r) {
    $terms[$r->tid] = $r->taxonomy_term_data_name;
  }
  return $terms;
}
