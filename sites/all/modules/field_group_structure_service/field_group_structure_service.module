<?php

/**
* Implements of hook_services_resources().
*/
function field_group_structure_service_services_resources() {
  $api = array(
    'field_group_structure' => array(
      'operations' => array(
        'index' => array(
          'help' => 'List all field grouping information.',
          'callback' => '_field_group_structure_service_index',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => array('path' => '0'),
              'optional' => TRUE,
              'default' => '0',
            ),
            array(
              'name' => 'entity_name',
              'type' => 'string',
              'description' => 'The name of the entity',
              'source' => array('path' => 1),
              'optional' => TRUE,
              'default' => '0',
            ),
            array(
              'name' => 'bundle_name',
              'type' => 'string',
              'description' => 'The name of the bundle within the named entity to return the field-group context',
              'source' => array('path' => 2),
              'optional' => TRUE,
              'default' => '0',
            ),
          ),
        ),
      ),
    ),
  );
  return $api;
}

/**
 * Callback for index field_group_structure resource.
 */
function _field_group_structure_service_index($fn, $entity_name, $bundle_name) {
  global $user;

  // Build CID.
  $cid = "field_group_structure_{$user->language}";

  if (!empty($entity_name)) {
    $cid .= '_' . $entity_name;
  }

  if (!empty($bundle_name)) {
    $cid .= '_' . $bundle_name;
  }

  // Get cache based on the built CID.
  $cache = cache_get($cid, 'cache_field_group_structure_service');

  if (!$cache) {
    // Get field group structure.
    $structure = field_group_info_groups($entity_name, $bundle_name);
    // Convert all items of the given array in array items.
    $structure = _array_casting($structure);
    // Get all labels translated.
    translate_labels($structure, $user->language);

    cache_set($cid, $structure, 'cache_field_group_structure_service', CACHE_TEMPORARY);
  }
  else {
    $structure = $cache->data;
  }

  return $structure;
}

/**
 * Return all elements of an array converted to array.
 *
 * @param $element
 *   Array to check.
 *
 * @return array
 *   Converted array.
 */
function _array_casting($element) {
  if (is_array($element)) {
    foreach ($element as $key => $value) {
      if (is_array($value)) {
        $element[$key] = _array_casting($value);
      }
      else {
        $element[$key] = (array)$value;
      }
    }
  }
  else {
    $element = (array)$element;
  }

  return $element;
}

/**
 * Get translated strings of the groups labels.
 *
 * @param $structure
 *   Field group structure.
 * @param $langcode
 *   Langcode of the user language.
 */
function translate_labels(&$structure, $langcode) {
  foreach ($structure as $entity_type_key => $entity_type) {
    foreach ($entity_type as $bundle_key => $bundle) {
      foreach ($bundle as $view_key => $view) {
        foreach ($view as $group_key => $group) {
          // Since field group use interface translation, retrieve the labels
          // translated string with t function.
          if (isset($group['label'])) {
            $structure[$entity_type_key][$bundle_key][$view_key][$group_key]['label'] = t($group['label'], array(), array('langcode' => $langcode));
          }

          if (isset($group['format_settings']['label'])) {
            $structure[$entity_type_key][$bundle_key][$view_key][$group_key]['format_settings']['label'] = t($group['format_settings']['label'], array(), array('langcode' => $langcode));
          }
        }
      }
    }
  }
}
