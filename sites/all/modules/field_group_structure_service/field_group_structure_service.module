<?php

/**
* Implements of hook_services_resources().
*/
function field_group_structure_service_services_resources() {
  $api = array(
    'field_group_structure' => array(
      'operations' => array(
        'index' => array(
          'help' => 'List all field grouping information.',
          'callback' => '_field_group_structure_service_index',
          'access callback' => 'user_access',
          'access arguments' => array('access content'),
          'access arguments append' => FALSE,
          'args' => array(
            array(
              'name' => 'fn',
              'type' => 'string',
              'description' => 'Function to perform',
              'source' => array('path' => '0'),
              'optional' => TRUE,
              'default' => '0',
            ),
            array(
              'name' => 'entity_name',
              'type' => 'string',
              'description' => 'The name of the entity',
              'source' => array('path' => 1),
              'optional' => TRUE,
              'default' => '0',
            ),
            array(
              'name' => 'bundle_name',
              'type' => 'string',
              'description' => 'The name of the bundle within the named entity to return the field-group context',
              'source' => array('path' => 2),
              'optional' => TRUE,
              'default' => '0',
            ),
          ),
        ),
      ),
    ),
  );
  return $api;
}

/**
 * Callback for index field_group_structure resource.
 */
function _field_group_structure_service_index($fn, $entity_name, $bundle_name) {
  // Get field group structure.
	$structure = field_group_info_groups($entity_name, $bundle_name);
	// Convert all items of the given array in array items.
	$structure = _array_casting($structure);

  return $structure;
}

/**
 * Return all elements of an array converted to array.
 *
 * @param $element
 *   Array to check.
 *
 * @return array
 *   Converted array.
 */
function _array_casting($element) {
  if (is_array($element)) {
    foreach ($element as $key => $value) {
      if (is_array($value)) {
        $element[$key] = _array_casting($value);
      }
      else {
        $element[$key] = (array)$value;
      }
    }
  }
  else {
    $element = (array)$element;
  }

  return $element;
}
